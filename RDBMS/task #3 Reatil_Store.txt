
                                                                        Task #3
========================================================================================================================================================================================
Database => Retail_Store
Query: CREATE DATABASE Reatil_Store

Customers Table:
Query:1
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    join_date DATE);

Query:2
INSERT INTO Customers VALUES
(1, 'ABHI', 'CHAUDHARY', 'Abhi12@gmail.com', '1234567890', '123 Elm St, Springfield', '2023-06-15'),
(2, 'ADITYA', 'SEN', 'Aditya5678@gmail.com', '6264738990', '456 Oak St, Rivertown', '2024-01-10'),
(3, 'ALIYA', 'RAYZADA', 'Aliyaroy2345@gmail.com', '8907564329', '789 Pine St, Smalltown', '2023-11-20'),
(4, 'BABLU', 'WRMA', 'Bablu@gmail.com', '8769503449', '101 Maple St, Lakedale', '2022-08-05'),
(5, 'CHARU', 'BHATORIYA', 'Charu6789@gmail.com', '9098765432', '202 Birch St, Greenfield', '2024-02-25'),
(6, 'DEVENDRA', 'GOSWAMI', 'Devendra345@gmail.com', '9567899043', '303 Cedar St, Westwood', '2023-09-10'),
(7, 'EKTA', 'KUMARI', 'Ekta@gmail.com', '9343723456', '404 Walnut St, Hillcrest', '2024-03-01'),
(8, 'FARIDA', 'BEGAM', 'Farida23@gmail.com', '9768543423', '505 Pine St, Clearwater', '2023-12-12'),
(9, 'GAOURY', 'GUPTA', 'G4567@gmail.com', '9087654329', '606 Oak St, Mountainview', '2022-04-10'),
(10, 'HEENA', 'KHAN', 'Heena@gmail.com', '6465678990', '707 Birch St, Valleytown', '2023-07-25');

===========================================================================================================================================================================
Products Table:
Query:1
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
     product_name VARCHAR(100),
     category VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT);

Query:2
INSERT INTO Products VALUES
(10, 'Laptop', 'Electronics', 899.99, 50),
(20, 'Smartphone', 'Electronics', 699.99, 100),
(30, 'Bluetooth Headphones', 'Accessories', 129.99, 200),
(40, 'Coffee Maker', 'Home Appliances', 49.99, 75),
(50, 'Electric Kettle', 'Home Appliances', 29.99, 120),
(60, 'Smartwatch', 'Electronics', 199.99, 80),
(70, 'Gaming Mouse', 'Accessories', 49.99, 150),
(80, 'Desk Chair', 'Furniture', 149.99, 60),
(90, 'Refrigerator', 'Home Appliances', 999.99, 30),
(100, 'Air Purifier', 'Home Appliances', 149.99, 40);

============================================================================================================================================================================

Orders Table:
Query:1
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    order_date DATE,
    total_amount DECIMAL(10, 2),
    order_status VARCHAR(20));

Query:2
INSERT INTO Orders VALUES
(100, 1, '2023-01-10', 250.75, 'Pending'),
(200, 2, '2025-02-11', 349.99, 'Shipped'),
(300, 3, '2024-03-12', 99.50, 'Delivered'),
(400, 4, '2022-04-13', 150.00, 'Pending'),
(500, 5, '2024-05-14', 450.25, 'Shipped'),
(600, 6, '2025-01-15', 99.99, 'Pending'),
(700, 7, '2023-01-16', 120.00, 'Delivered'),
(800, 8, '2022-07-17', 220.30, 'Shipped'),
(900, 9, '2024-09-18', 300.00, 'Pending'),
(1000, 10, '2022-04-19', 180.75, 'Shipped');

=====================================================================================================================================================================================

OrderDetails Table:
Query:1
CREATE TABLE Order_Details (
     order_detail_id INT PRIMARY KEY,
     order_id INT,
     FOREIGN KEY (order_id) REFERENCES Orders(order_id),
     product_id INT,
     FOREIGN KEY (product_id) REFERENCES Products(product_id),
     quantity INT,
     unit_price DECIMAL(10, 2));

Query:2
INSERT INTO Order_Details VALUES
(101, 100, 10, 1, 899.99), 
(102, 200, 20, 2, 129.99), 
(103, 300, 30, 1, 699.99),  
(104, 400, 40, 1, 49.99),   
(105, 500, 50, 1, 29.99),   
(106, 600, 60, 2, 199.99),  
(107, 700, 70, 1, 49.99),  
(108, 800, 80, 3, 149.99),  
(109, 900, 90, 1, 999.99),  
(110, 1000, 100, 2, 149.99);

======================================================================================================================================================================================

Payments Table:
Query:1
CREATE TABLE Payments 
          ( payment_id INT PRIMARY KEY, 
           order_id INT, 
           FOREIGN KEY (order_id) REFERENCES Orders(order_id), 
           payment_date DATE, 
           amount DECIMAL(10, 2),
          payment_method VARCHAR(20));

Query:2
INSERT INTO Payments VALUES
(501, 100, '2025-01-10', 250.75, 'Credit Card'),    
(502, 200, '2022-02-11', 349.99, 'PayPal'),          
(503, 300, '2023-03-12', 99.50, 'Credit Card'),      
(504, 400, '2024-04-13', 150.00, 'Credit Card'),     
(505, 500, '2022-06-14', 450.25, 'PayPal'),          
(506, 600, '2023-07-15', 99.99, 'Credit Card'),      
(507, 700, '2022-05-16', 120.00, 'PayPal'),          
(508, 800, '2024-08-17', 220.30, 'Credit Card'),     
(509, 900, '2022-09-18', 300.00, 'PayPal'),          
(510, 1000, '2022-11-19', 180.75, 'Credit Card');   

=======================================================================================================================================================================================
SQL Queries for the Case Study

1. Find the Total Number of Orders for Each Customer
Query: SELECT C.customer_id, C.first_name, C.last_name, COUNT(O.order_id) AS total_orders 
       FROM Customers C 
       LEFT JOIN Orders O ON C.customer_id = O.customer_id 
       GROUP BY C.customer_id, C.first_name, C.last_name;

================================================================================================

2. Find the Total Sales Amount for Each Product (Revenue per Product)
Query: SELECT P.product_id, P.product_name, SUM(OD.quantity * OD.unit_price) AS total_revenue 
       FROM Products P 
       JOIN order_details OD ON P.product_id = OD.product_id 
       GROUP BY P.product_id, P.product_name 
       ORDER BY total_revenue DESC;

======================================================================================

3. Find the Most Expensive Product Sold
Query: SELECT P.product_id, P.product_name, MAX(P.price) AS highest_price 
       FROM Products P 
       WHERE P.product_id IN (
       SELECT DISTINCT product_id FROM order_details);

=================================================================================

4. Get the List of Customers Who Have Placed Orders in the Last 30 Days
Query: SELECT DISTINCT c.customer_id, c.first_name, c.last_name, c.email 
       FROM customers c 
       JOIN Orders O ON c.customer_id = O.customer_id 
       WHERE O.order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);

==========================================================================================

5. Calculate the Total Amount Paid by Each Customer
Query: SELECT C.customer_id, C.first_name, C.last_name, SUM(P.amount) AS total_paid 
       FROM Customers C 
       JOIN Orders O ON C.customer_id = O.customer_id 
       JOIN Payments P ON O.order_id = P.order_id 
       GROUP BY C.customer_id, C.first_name, C.last_name 
       ORDER BY total_paid DESC;

=============================================================================================================================

6. Get the Number of Products Sold by Category
Query: SELECT P.category, SUM(OD.quantity) AS total_products_sold 
       FROM Products P 
       JOIN order_details OD ON P.product_id = OD.product_id 
       GROUP BY P.category 
       ORDER BY total_products_sold DESC;

==================================================================================

7. List All Orders That Are Pending (i.e., Orders that haven't been shipped yet)
Query: SELECT O.order_id, O.order_date, C.first_name, C.last_name, O.total_amount 
       FROM Orders O 
       JOIN Customers C ON O.customer_id = C.customer_id 
       WHERE O.order_status = 'Pending';

=============================================================================================

8. Find the Average Order Value (Total Order Amount / Number of Orders)
Query: SELECT AVG(total_amount) AS average_order_value 
       FROM Orders;

====================================================================================

9. List the Top 5 Customers Who Have Spent the Most Money
Query: SELECT C.customer_id, C.first_name, C.last_name, SUM(P.amount) AS total_spent 
       FROM Customers C 
       JOIN Orders O ON C.customer_id = O.customer_id 
       JOIN Payments P ON O.order_id = P.order_id 
       GROUP BY C.customer_id, C.first_name, C.last_name 
       ORDER BY total_spent DESC 
       LIMIT 5;
=======================================================================================================

10. Find the Products That Have Never Been Sold
Query: SELECT P.product_id, P.product_name, P.category, P.price 
       FROM Products P 
       LEFT JOIN order_details OD ON P.product_id = OD.product_id 
       WHERE OD.product_id IS NULL;
==================================================================================================================
